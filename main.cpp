//volodey17
#include <iostream> //Директивы препроцессора
#include <math.h>   //подключение библиотек
#include <stdlib.h>

using namespace std; //иначе для "cout" - "std::cout"."

//x = (float)z/2   (тип) выражение - преобразование типов
//sizeof(тип) или sizeof выражение - определение размера (байт)
//указатель - перемменная, значение которой - АДРЕС. Преобразование типов - ложно.
//сложение и вычитание с const(N-байт типа указ.), вычитание одного из другого, inc/dec
//В одном массиве - операции отношения и const нулевого указателя (NULL).
// & - получение адреса
// * - разадресация

//Объявление ГЛОБАЛЬНЫХ переменных (параметров)
//int *p;   - Объявление указателя

//"int func (int a)" - тип имя(формальные параметры) функции
//ОПИСАНИЕ функций(полное) или ПРОТОТИП и описание после MAIN .
//Прототип "int func(int , int*)" - равносилен "int func(int a, int* b)"
//"const тип* имя" - передача по адресу(ориг.) без возможности модифицировать.
//в теле функции параметры переданные по адресу обрабатываются через РАЗАДРЕСАЦИЮ (*b)

//int func(float) - перегрузка фунции. Одно имя , разные параметры - разные алгоритмы обработки.

//template clase<type> заголовок - ШАБЛОН функции, тип входных данных - один из параметров.
//Определяем абстрактный тип данных с помощью служебного слова type
//type func (type x, type z)

int main(int argc, char *argv[]) //argc - кол_во параметров передаваемых из командной строки
//*argv[] - указатель на массив укаазателей типа char(массив строк).
//По-умолчанию argc=1, *argv[0] - имя запускаемого файла
{
    //func (a, &b) - вызов функции(фактические параметры),
    //"а" - передача параметра по значению (обрабатывается копия)
    //"&b"- передача параметра по адресу (обрабатывается оригинал)
    //внутри функции ЛОКАЛЬНАЯ переменная перекрывает ГЛОБАЛЬНУЮ.
    //"::a" - обращение к ГЛОБАЛЬНОЙ переменной через ОПЕРАТОР РАСШИРЕНИЯ ОБЛАСТИ ВИДИМОСТИ
    float a,b,c,s,p; //локальные переменные
    cout << "Side of the triangle:" << endl;
    cin >> a >> b >> c;
    p = a + b + c;
    s = sqrt(p/2 * (p/2-a) * (p/2-b) * (p/2-c));
    cout << "Triangle perimeter:" << p << endl <<
            " Area of a triangle:" << s << endl;
    return 0; //возврат значения через имя функции
}
//Описание функций (прототип перед MAIN)

